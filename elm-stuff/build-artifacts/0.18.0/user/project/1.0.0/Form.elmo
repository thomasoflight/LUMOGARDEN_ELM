var _user$project$Form$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'NoOp':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
			case 'Check':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{bool: _p0._0}),
					{ctor: '[]'});
			case 'CheckInt':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{$int: _p0._0}),
					{ctor: '[]'});
			default:
				var updateStep = function (s) {
					return _elm_lang$core$Native_Utils.eq(s.id, _p0._1) ? _elm_lang$core$Native_Utils.update(
						s,
						{completed: !_p0._0}) : s;
				};
				var updateCard = function (c) {
					return _elm_lang$core$Native_Utils.update(
						c,
						{
							steps: A2(_elm_lang$core$List$map, updateStep, c.steps)
						});
				};
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							cardA: updateCard(model.cardA),
							cardB: updateCard(model.cardB)
						}),
					{ctor: '[]'});
		}
	});
var _user$project$Form_ops = _user$project$Form_ops || {};
_user$project$Form_ops['=>'] = F2(
	function (v0, v1) {
		return {ctor: '_Tuple2', _0: v0, _1: v1};
	});
var _user$project$Form$Step = F3(
	function (a, b, c) {
		return {description: a, completed: b, id: c};
	});
var _user$project$Form$someSteps = {
	ctor: '::',
	_0: A3(_user$project$Form$Step, 'A', true, 1),
	_1: {
		ctor: '::',
		_0: A3(_user$project$Form$Step, 'B', false, 2),
		_1: {ctor: '[]'}
	}
};
var _user$project$Form$moreSteps = {
	ctor: '::',
	_0: A3(_user$project$Form$Step, 'C', false, 3),
	_1: {
		ctor: '::',
		_0: A3(_user$project$Form$Step, 'D', false, 4),
		_1: {ctor: '[]'}
	}
};
var _user$project$Form$Card = F2(
	function (a, b) {
		return {title: a, steps: b};
	});
var _user$project$Form$cardA = A2(_user$project$Form$Card, 'A', _user$project$Form$someSteps);
var _user$project$Form$cardB = A2(_user$project$Form$Card, 'B', _user$project$Form$moreSteps);
var _user$project$Form$Model = F4(
	function (a, b, c, d) {
		return {cardA: a, cardB: b, bool: c, $int: d};
	});
var _user$project$Form$init = A2(
	_elm_lang$core$Platform_Cmd_ops['!'],
	A4(_user$project$Form$Model, _user$project$Form$cardA, _user$project$Form$cardB, true, 0),
	{ctor: '[]'});
var _user$project$Form$Debug = {ctor: 'Debug'};
var _user$project$Form$viewDebug = function (c) {
	return A3(
		_mdgriffith$style_elements$Element$row,
		_user$project$Form$Debug,
		{
			ctor: '::',
			_0: _mdgriffith$style_elements$Element_Attributes$center,
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _mdgriffith$style_elements$Element$text(
				_elm_lang$core$Basics$toString(c)),
			_1: {ctor: '[]'}
		});
};
var _user$project$Form$GreyOutline = {ctor: 'GreyOutline'};
var _user$project$Form$GreenButton = {ctor: 'GreenButton'};
var _user$project$Form$BlueFill = {ctor: 'BlueFill'};
var _user$project$Form$None = {ctor: 'None'};
var _user$project$Form$stylesheet = _mdgriffith$style_elements$Style$styleSheet(
	{
		ctor: '::',
		_0: A2(
			_mdgriffith$style_elements$Style$style,
			_user$project$Form$None,
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_mdgriffith$style_elements$Style$style,
				_user$project$Form$BlueFill,
				{
					ctor: '::',
					_0: _mdgriffith$style_elements$Style_Color$background(_elm_lang$core$Color$blue),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_mdgriffith$style_elements$Style$style,
					_user$project$Form$GreyOutline,
					{
						ctor: '::',
						_0: _mdgriffith$style_elements$Style_Border$all(1),
						_1: {
							ctor: '::',
							_0: _mdgriffith$style_elements$Style_Border$solid,
							_1: {
								ctor: '::',
								_0: _mdgriffith$style_elements$Style_Color$border(_elm_lang$core$Color$grey),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_mdgriffith$style_elements$Style$style,
						_user$project$Form$GreenButton,
						{
							ctor: '::',
							_0: _mdgriffith$style_elements$Style_Color$background(_elm_lang$core$Color$green),
							_1: {
								ctor: '::',
								_0: _mdgriffith$style_elements$Style_Font$center,
								_1: {
									ctor: '::',
									_0: _mdgriffith$style_elements$Style_Color$text(_elm_lang$core$Color$white),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_mdgriffith$style_elements$Style$style,
							_user$project$Form$Debug,
							{
								ctor: '::',
								_0: _mdgriffith$style_elements$Style_Color$text(_elm_lang$core$Color$lightCharcoal),
								_1: {
									ctor: '::',
									_0: _mdgriffith$style_elements$Style_Font$uppercase,
									_1: {
										ctor: '::',
										_0: _mdgriffith$style_elements$Style_Font$size(10),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _user$project$Form$viewRebloom = A3(
	_mdgriffith$style_elements$Element$row,
	_user$project$Form$None,
	{
		ctor: '::',
		_0: _mdgriffith$style_elements$Element_Attributes$center,
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A3(
			_mdgriffith$style_elements$Element$el,
			_user$project$Form$GreenButton,
			{
				ctor: '::',
				_0: _mdgriffith$style_elements$Element_Attributes$width(
					_mdgriffith$style_elements$Element_Attributes$px(100)),
				_1: {
					ctor: '::',
					_0: _mdgriffith$style_elements$Element_Attributes$height(
						_mdgriffith$style_elements$Element_Attributes$px(25)),
					_1: {ctor: '[]'}
				}
			},
			_mdgriffith$style_elements$Element$text('rebloom')),
		_1: {ctor: '[]'}
	});
var _user$project$Form$ToggleComplete = F2(
	function (a, b) {
		return {ctor: 'ToggleComplete', _0: a, _1: b};
	});
var _user$project$Form$CheckInt = function (a) {
	return {ctor: 'CheckInt', _0: a};
};
var _user$project$Form$Check = function (a) {
	return {ctor: 'Check', _0: a};
};
var _user$project$Form$viewCardSteps = function (card) {
	var viewCheckbox = function (step) {
		return A3(
			_mdgriffith$style_elements$Element$row,
			_user$project$Form$None,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A3(
					_mdgriffith$style_elements$Element$el,
					_user$project$Form$None,
					{
						ctor: '::',
						_0: _mdgriffith$style_elements$Element_Attributes$width(
							_mdgriffith$style_elements$Element_Attributes$percent(80)),
						_1: {ctor: '[]'}
					},
					_mdgriffith$style_elements$Element$text(step.description)),
				_1: {
					ctor: '::',
					_0: A3(
						_mdgriffith$style_elements$Element_Input$checkbox,
						_user$project$Form$None,
						{
							ctor: '::',
							_0: _mdgriffith$style_elements$Element_Events$onClick(
								A2(_user$project$Form$ToggleComplete, step.completed, step.id)),
							_1: {ctor: '[]'}
						},
						{
							onChange: _user$project$Form$Check,
							checked: step.completed,
							label: A3(
								_mdgriffith$style_elements$Element$el,
								_user$project$Form$None,
								{ctor: '[]'},
								_mdgriffith$style_elements$Element$text('')),
							options: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	};
	return A3(
		_mdgriffith$style_elements$Element$column,
		_user$project$Form$None,
		{
			ctor: '::',
			_0: _mdgriffith$style_elements$Element_Attributes$width(
				_mdgriffith$style_elements$Element_Attributes$percent(50)),
			_1: {
				ctor: '::',
				_0: _mdgriffith$style_elements$Element_Attributes$spacing(20),
				_1: {ctor: '[]'}
			}
		},
		A2(_elm_lang$core$List$map, viewCheckbox, card.steps));
};
var _user$project$Form$view = function (model) {
	return A2(
		_mdgriffith$style_elements$Element$layout,
		_user$project$Form$stylesheet,
		A3(
			_mdgriffith$style_elements$Element$el,
			_user$project$Form$None,
			{
				ctor: '::',
				_0: _mdgriffith$style_elements$Element_Attributes$center,
				_1: {
					ctor: '::',
					_0: _mdgriffith$style_elements$Element_Attributes$width(
						_mdgriffith$style_elements$Element_Attributes$px(1000)),
					_1: {
						ctor: '::',
						_0: _mdgriffith$style_elements$Element_Attributes$height(
							_mdgriffith$style_elements$Element_Attributes$px(1000)),
						_1: {ctor: '[]'}
					}
				}
			},
			A3(
				_mdgriffith$style_elements$Element$column,
				_user$project$Form$GreyOutline,
				{
					ctor: '::',
					_0: _mdgriffith$style_elements$Element_Attributes$height(_mdgriffith$style_elements$Element_Attributes$fill),
					_1: {
						ctor: '::',
						_0: _mdgriffith$style_elements$Element_Attributes$width(_mdgriffith$style_elements$Element_Attributes$fill),
						_1: {
							ctor: '::',
							_0: _mdgriffith$style_elements$Element_Attributes$padding(60),
							_1: {
								ctor: '::',
								_0: _mdgriffith$style_elements$Element_Attributes$spacing(20),
								_1: {ctor: '[]'}
							}
						}
					}
				},
				{
					ctor: '::',
					_0: _user$project$Form$viewRebloom,
					_1: {
						ctor: '::',
						_0: A3(
							_mdgriffith$style_elements$Element$row,
							_user$project$Form$None,
							{
								ctor: '::',
								_0: _mdgriffith$style_elements$Element_Attributes$spacing(40),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _user$project$Form$viewCardSteps(model.cardA),
								_1: {
									ctor: '::',
									_0: _user$project$Form$viewCardSteps(model.cardB),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: _user$project$Form$viewDebug(model.cardA),
							_1: {
								ctor: '::',
								_0: _user$project$Form$viewDebug(model.cardB),
								_1: {ctor: '[]'}
							}
						}
					}
				})));
};
var _user$project$Form$main = _elm_lang$html$Html$program(
	{
		init: _user$project$Form$init,
		update: _user$project$Form$update,
		view: _user$project$Form$view,
		subscriptions: function (_p1) {
			return _elm_lang$core$Platform_Sub$none;
		}
	})();
var _user$project$Form$NoOp = {ctor: 'NoOp'};
